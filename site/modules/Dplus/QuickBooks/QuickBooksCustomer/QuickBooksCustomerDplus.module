<?php namespace ProcessWire;

use QuickBooksOnline\API\Facades\Customer as QbCustomerApi;
use QuickBooksOnline\API\Data\IPPCustomer as QbCustomerData;
use CustomerQuery, Customer;

/**
 * Handles Sending Requests starting from Dplus Data
 * 
 * @property QuickBooksCustomerApi   $api   QuickBooks Customer API Caller
 * @property QuickBooksCustomerModel $model Handles Database Model for Customer
 */
class QuickBooksCustomerDplus extends WireData implements Module {
	public function connect() {
		$this->model = $this->wire('modules')->get('QuickBooksCustomerModel');
		$this->api   = $this->wire('modules')->get('QuickBooksCustomerApi');
		$this->api->connect();
	}

/* =============================================================
	Public Facing Functions
============================================================= */
	
	/**
	 * Send Create / Update of Customer by Customer ID (dplud)
	 *
	 * @param  string $custID Customer ID (dplud)
	 * @return void
	 */
	public function export_from_id($custID) {
		return $this->api->exists_id_dplus($custID) ? $this->create_from_id_dplus($custID) : $this->update_from_id_dplus($custID);
	}

	/**
	 * Update All Dplus Customers at QuickBooks
	 *
	 * @return bool
	 */
	public function export_all() {
		$custIDs = $this->model->all_custids();
		return $this->export_multi($custIDs->toArray());
	}

	/**
	 * Update Selected Dplus Customers at QuickBooks
	 *
	 * @param  array $custIDs Dplus Customer IDs
	 * @return array
	 */
	public function export_multi(array $custIDs) {
		$responses = array();

		foreach ($custIDs as $custID) {
			$responses[$custID] = $this->export_from_id($custID);
		}
		return $responses;
	}

/* =============================================================
	Source Dplus Functions
============================================================= */
	/**
	 * Send Create of Customer by Customer ID (dplus)
	 * 
	 * @param  string $custID Customer ID (dplus)
	 * @return array
	 */
	public function create_from_id($custID) {
		$customer = $this->model->customer_by_id($custID);
		return $this->create_from_customer($customer);
	}

	/**
	 * Send Update of Customer by Customer ID (dplus)
	 * 
	 * @param  string $custID Customer ID (dplus)
	 * @return array
	 */
	public function update_from_id($custID) {
		$customer = $this->model->customer_by_id($custID);
		return $this->update_from_customer($customer);
	}

	/**
	 * Request Customer Create at QuickBooks
	 *
	 * @param Customer $customer Dplus Customer
	 * @return array
	 */
	protected function create_from_customer(Customer $customer) {
		if ($this->api->exists_id_dplus($customer->custid)) {
			$this->update_from_customer($customer);
		} else {
			$new = QbCustomerApi::create($this->model->qb_customer_array($customer));
			$this->api->create($new);
		}
		return $this->api->response;
	}

	/**
	 * Request Customer Update at QuickBooks
	 *
	 * @param Customer $customer Dplus Customer
	 * @return array
	 */
	protected function update_from_customer($customer) {
		if ($this->api->exists_id_dplus($customer->custid)) {
			$new = $this->model->qb_customer_array($customer);
			$original = $this->api->read_by_id_dplus($customer->custid);
			return $this->api->update($original, $new);
		} else {
			$this->api->response['error'] = true;
			$this->api->response['message'] = "Dplus Customer $customer->custid does not exist in QuickBooks";
		}
		return $this->api->response;
	}

/* =============================================================
	ProcessWire Module Functions
============================================================= */
	public function __construct() {
		$this->api  = false;
		$this->model = false;
	}

	/**
	 * ProcessWire Module Info
	 *
	 * @return void
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'QuickBooks Customer Dplus',
			'version' => 101,
			'summary' => 'Sends Requests from Dplus Data',
			'singular' => true,
			'autoload' => true,
			'requires' => array(
				'QuickBooks',
				'QuickBooksCustomer',
				'QuickBooksCustomerApi',
				'QuickBooksCustomerModel',
			)
		);
	}
}
