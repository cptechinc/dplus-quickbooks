<?php namespace ProcessWire;

use Propel\Runtime\Connection\ConnectionManagerSingle;
use Propel\Runtime\Propel;
use Propel\Runtime\ServiceContainer\ServiceContainerInterface;

/**
 * QuickBooksCredentials
 *
 * Class for Maintaining Credentials for QuickBooks
 */
class QuickBooksCredentials extends Process implements ConfigurableModule {
	/**
	 * Writes Error Message to Database Error Log
	 * @param  string $message Error Message
	 * @return void
	 */
	public function log_error($message) {
		$date = date("Y-m-d h:m:s");
		$class = get_class($this);
		$message = "[{$date}] [{$class}] $message";
		$this->wire('log')->save('db-errors', $message);
	}

/* =============================================================
	ProcessWire Module Functions
============================================================= */

	public static function getModuleInfo() {
		$infoArray = array(
			'title' => __('QuickBooks Credentials Manager'),
			'version' => 115,
			'summary' => __("Maintains Credentials for QuickBooks API"),
			'autoload' => true,
			'singular' => true,
			'author' => 'pauldro',
			'icon' => 'database'
		);
		return $infoArray;
	}

	/**
	 * Return Input Fields for Database Connectiion Configuration
	 * @var InputfieldWrapper
	 */
	static public function getModuleConfigInputfields(array $data) {
		$modules = wire('modules');
		$fields = new InputfieldWrapper();

		$f = $modules->get('InputfieldText');
		$f->attr('name', 'client_id');
		$f->set('collapsed',$data['client_id'] ? false:true);
		$f->icon = 'fa-user';
		$f->label = __('QuickBooks API Client ID');
		$f->description = __('Client ID for QuickBooks API');
		$f->value = $data['client_id'];
		$fields->add($f);

		$f = $modules->get('InputfieldText');
		$f->attr('name', 'client_secret');
		$f->set('collapsed', $data['client_secret'] ? false:true);
		$f->icon = 'fa-key';
		$f->label = __('QuickBooks API Client Secret');
		$f->description = __('Client Secret for QuickBooks API');
		$f->value = $data['client_secret']; 
		$fields->add($f);

		return $fields;
	}
}
